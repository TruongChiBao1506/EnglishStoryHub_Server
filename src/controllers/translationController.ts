import { Request, Response } from 'express';
import { asyncHandler } from '../middleware/errorHandler';
import axios from 'axios';

interface AuthRequest extends Request {
  user?: {
    _id: string;
    username: string;
    email: string;
  };
}

interface TranslateRequest extends AuthRequest {
  body: {
    text: string;
    targetLanguage: string;
  };
}

interface GoogleTranslateResponse {
  data: {
    translations: Array<{
      translatedText: string;
      detectedSourceLanguage?: string;
    }>;
  };
}

// Google Translate REST API function using axios
const googleTranslateAPI = async (text: string, targetLang: string): Promise<string> => {
  const apiKey = process.env.GOOGLE_TRANSLATE_API_KEY;
  
  if (!apiKey) {
    throw new Error('Google Translate API key not configured');
  }

  try {
    const response = await axios.post<GoogleTranslateResponse>(
      'https://translation.googleapis.com/language/translate/v2',
      null,
      {
        params: {
          key: apiKey,
          q: text,
          source: 'en',
          target: targetLang
        }
      }
    );

    if (response.data?.data?.translations?.[0]?.translatedText) {
      return response.data.data.translations[0].translatedText;
    } else {
      throw new Error('Invalid response from Google Translate API');
    }
  } catch (error) {
    if (axios.isAxiosError(error)) {
      console.error('Google Translate API error:', error.response?.status, error.response?.data);
    } else {
      console.error('Google Translate API error:', error);
    }
    throw error;
  }
};

// Fallback mock translation for development/demo
const mockTranslate = async (text: string, targetLang: string): Promise<string> => {
  // Better translations with full sentence context
  const translations: Record<string, Record<string, string>> = {
    'vi': {
      // Story titles
      'My First Day at University': 'Ng√†y ƒê·∫ßu Ti√™n C·ªßa T√¥i T·∫°i ƒê·∫°i H·ªçc',
      'The Adventure of Learning English': 'Cu·ªôc Phi√™u L∆∞u H·ªçc Ti·∫øng Anh',
      'A Journey to Success': 'H√†nh Tr√¨nh ƒê·∫øn Th√†nh C√¥ng',
      'Friendship and Dreams': 'T√¨nh B·∫°n V√† ∆Ø·ªõc M∆°',
      
      // Common story beginnings
      'Once upon a time': 'Ng√†y x·ª≠a ng√†y x∆∞a',
      'It was a bright sunny morning': 'ƒê√≥ l√† m·ªôt bu·ªïi s√°ng n·∫Øng ƒë·∫πp',
      'In the beginning': 'Ban ƒë·∫ßu',
      'Long ago': 'Ng√†y x∆∞a',
      
      // Common phrases
      'when I stepped into': 'khi t√¥i b∆∞·ªõc v√†o',
      'university campus': 'khu√¥n vi√™n tr∆∞·ªùng ƒë·∫°i h·ªçc',
      'for the first time': 'l·∫ßn ƒë·∫ßu ti√™n',
      'My heart was beating fast': 'Tim t√¥i ƒë·∫≠p r·∫•t nhanh',
      'with excitement and nervousness': 'v√¨ h·ªìi h·ªôp v√† lo l·∫Øng',
      'was huge with': 'r·∫•t r·ªông l·ªõn v·ªõi',
      'deep gardens': 'nh·ªØng khu v∆∞·ªùn s√¢u',
      'modern buildings': 'nh·ªØng t√≤a nh√† hi·ªán ƒë·∫°i',
      'I met my roommate': 'T√¥i g·∫∑p b·∫°n c√πng ph√≤ng',
      'who was very friendly': 'ng∆∞·ªùi r·∫•t th√¢n thi·ªán',
      'and helped me settle in': 'v√† gi√∫p t√¥i ·ªïn ƒë·ªãnh',
      
      // Single words (fallback)
      'University': 'ƒê·∫°i H·ªçc',
      'morning': 'bu·ªïi s√°ng',
      'campus': 'khu√¥n vi√™n',
      'first': 'ƒë·∫ßu ti√™n',
      'bright': 't∆∞∆°i s√°ng',
      'sunny': 'n·∫Øng ƒë·∫πp',
      'heart': 'tr√°i tim',
      'excitement': 'h·ª©ng th√∫',
      'nervousness': 'lo l·∫Øng',
      'huge': 'r·ªông l·ªõn',
      'gardens': 'khu v∆∞·ªùn',
      'modern': 'hi·ªán ƒë·∫°i',
      'buildings': 't√≤a nh√†',
      'roommate': 'b·∫°n c√πng ph√≤ng',
      'friendly': 'th√¢n thi·ªán',
      'helped': 'gi√∫p ƒë·ª°',
      'settle': '·ªïn ƒë·ªãnh'
    },
    'zh': {
      'My First Day at University': 'ÊàëÂú®Â§ßÂ≠¶ÁöÑÁ¨¨‰∏ÄÂ§©',
      'It was a bright sunny morning': 'ÈÇ£ÊòØ‰∏Ä‰∏™Èò≥ÂÖâÊòéÂ™öÁöÑÊó©Êô®',
      'when I stepped into': 'ÂΩìÊàëËµ∞Ëøõ',
      'university campus': 'Â§ßÂ≠¶Ê†°Âõ≠',
      'for the first time': 'Á¨¨‰∏ÄÊ¨°',
      'My heart was beating fast': 'ÊàëÁöÑÂøÉË∑≥ÂæóÂæàÂø´',
      'with excitement and nervousness': 'ÂÖ¥Â•ãÂíåÁ¥ßÂº†',
      'University': 'Â§ßÂ≠¶',
      'morning': 'Êó©Êô®',
      'campus': 'Ê†°Âõ≠',
      'first': 'Á¨¨‰∏Ä',
      'heart': 'ÂøÉ'
    },
    'ja': {
      'My First Day at University': 'Â§ßÂ≠¶„Åß„ÅÆÂàùÊó•',
      'It was a bright sunny morning': 'Êòé„Çã„ÅèÊô¥„Çå„ÅüÊúù„Åß„Åó„Åü',
      'when I stepped into': 'ÁßÅ„ÅåË∂≥„ÇíË∏è„ÅøÂÖ•„Çå„Åü„Å®„Åç',
      'university campus': 'Â§ßÂ≠¶„Ç≠„É£„É≥„Éë„Çπ',
      'for the first time': 'Âàù„ÇÅ„Å¶',
      'University': 'Â§ßÂ≠¶',
      'morning': 'Êúù',
      'campus': '„Ç≠„É£„É≥„Éë„Çπ',
      'first': 'ÊúÄÂàù'
    }
  };

  const targetTranslations = translations[targetLang] || {};
  let translatedText = text;

  // Sort by length (longer phrases first) to avoid partial replacements
  const sortedEntries = Object.entries(targetTranslations)
    .sort(([a], [b]) => b.length - a.length);

  // Replace phrases in order of length (longest first)
  sortedEntries.forEach(([english, translated]) => {
    const regex = new RegExp(english.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gi');
    translatedText = translatedText.replace(regex, translated);
  });

  // If minimal translation occurred, add language prefix
  const changedWords = sortedEntries.filter(([eng]) => 
    text.toLowerCase().includes(eng.toLowerCase())
  ).length;
  
  if (changedWords === 0) {
    return `[Translated to ${targetLang.toUpperCase()}] ${text}`;
  }

  return translatedText;
};

// POST /api/translate
export const translateText = asyncHandler(async (req: TranslateRequest, res: Response): Promise<void> => {
  const { text, targetLanguage } = req.body;

  if (!text || !targetLanguage) {
    res.status(400).json({
      success: false,
      message: 'Text and target language are required'
    });
    return;
  }

  try {
    let translatedText: string;
    let provider = 'mock';

    // Try Google Translate REST API first
    if (process.env.GOOGLE_TRANSLATE_API_KEY) {
      console.log(`üåç Using Google Translate API for: ${text.substring(0, 50)}...`);
      try {
        translatedText = await googleTranslateAPI(text, targetLanguage);
        provider = 'google';
        console.log(`‚úÖ Google translation successful`);
      } catch (googleError) {
        console.error('Google Translate failed, falling back to mock:', googleError);
        translatedText = await mockTranslate(text, targetLanguage);
      }
    } else {
      console.log(`üé≠ Using mock translation for: ${text.substring(0, 50)}...`);
      translatedText = await mockTranslate(text, targetLanguage);
    }

    res.json({
      success: true,
      translatedText,
      originalText: text,
      targetLanguage,
      provider,
      message: 'Translation completed successfully'
    });
  } catch (error) {
    console.error('Translation error:', error);
    res.status(500).json({
      success: false,
      message: 'Translation service unavailable'
    });
  }
});

export default { translateText };
